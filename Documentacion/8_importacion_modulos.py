# ====================================================
# 游늷 DOCUMENTACI칍N Y EJEMPLOS DE IMPORTACI칍N EN PYTHON
# ====================================================

# ----------------------------------------------------
# 1. Importar m칩dulos est치ndar de Python
# ----------------------------------------------------
# Python trae una gran librer칤a est치ndar lista para usar.
# Ejemplo: importamos el m칩dulo math
import math

print("Ra칤z cuadrada de 16:", math.sqrt(16))
print("Pi:", math.pi)


# ----------------------------------------------------
# 2. Importar con alias
# ----------------------------------------------------
# Podemos dar un alias para abreviar nombres largos
import math as m

print("Seno de 90춿:", m.sin(m.radians(90)))


# ----------------------------------------------------
# 3. Importar funciones o variables espec칤ficas
# ----------------------------------------------------
# As칤 no necesitamos usar el prefijo del m칩dulo
from math import sqrt, pi

print("Ra칤z cuadrada con import directo:", sqrt(25))
print("Valor de pi importado directo:", pi)


# ----------------------------------------------------
# 4. Importar todos los elementos (NO recomendado)
# ----------------------------------------------------
# Puede causar conflictos de nombres y confusi칩n.
# from math import *

# print(sin(0))  # Funciona, pero poco claro de d칩nde viene


# ----------------------------------------------------
# 5. Importar m칩dulos externos (ejemplo con NumPy)
# ----------------------------------------------------
# Deben instalarse primero con:
#   pip install numpy
import numpy as np

array = np.array([1, 2, 3, 4, 5])
print("Array de numpy:", array)
print("Media:", np.mean(array))


# ----------------------------------------------------
# 6. Importar m칩dulos propios
# ----------------------------------------------------
# Supongamos que tenemos un archivo llamado `mimodulo.py`
# con este contenido:
#
# def saludar(nombre):
#     return f"Hola {nombre}"
#
# En este archivo lo podemos importar y usar.
# 丘멆잺 El archivo debe estar en el mismo directorio o en sys.path

# import mimodulo
# print(mimodulo.saludar("Pythonista"))

# Tambi칠n se puede importar una funci칩n espec칤fica:
# from mimodulo import saludar
# print(saludar("Ana"))


# ----------------------------------------------------
# 7. Uso del m칩dulo sys en importaciones
# ----------------------------------------------------
import sys

# sys.path es una lista de directorios donde Python busca m칩dulos
print("Rutas de b칰squeda de m칩dulos en sys.path:")
for ruta in sys.path:
    print(" -", ruta)

# Podemos a침adir din치micamente una ruta donde tengamos m칩dulos propios
# Supongamos que tenemos un m칩dulo en la carpeta "modulos_externos"
sys.path.append("modulos_externos")

# Ahora podr칤amos importar un m칩dulo que est칠 ah칤
# import modulo_personalizado


# ----------------------------------------------------
# 8. Importaci칩n condicional
# ----------------------------------------------------
# 칔til cuando un m칩dulo puede no estar disponible
try:
    import pandas as pd
    print("Pandas est치 instalado, versi칩n:", pd.__version__)
except ImportError:
    print("Pandas no est치 instalado, omitiendo...")


# ----------------------------------------------------
# 9. Recargar m칩dulos
# ----------------------------------------------------
# Cuando modificamos un m칩dulo propio durante ejecuci칩n,
# podemos recargarlo sin reiniciar el int칠rprete
# Esto es 칰til en entornos interactivos (ejemplo: Jupyter)

# import importlib
# import mimodulo
# importlib.reload(mimodulo)


# ----------------------------------------------------
# 游댌 Buenas pr치cticas profesionales
# ----------------------------------------------------
# - Agrupar imports al inicio del archivo.
# - Orden recomendado:
#   1. Librer칤as est치ndar de Python.
#   2. Librer칤as externas (instaladas con pip).
#   3. M칩dulos propios del proyecto.
# - Usar alias claros (ej: import numpy as np, import pandas as pd).
# - Evitar "from modulo import *".
# - Usar importaciones absolutas en proyectos grandes.
# - Manipular sys.path solo si es estrictamente necesario
#   (mejor usar entornos virtuales y buenas estructuras de proyecto).
#
# Ejemplo de orden recomendado:
#
# import os
# import sys
#
# import numpy as np
# import pandas as pd
#
# import mimodulo
