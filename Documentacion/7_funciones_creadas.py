# ====================================================
# 游늷 DOCUMENTACI칍N Y EJEMPLOS DE FUNCIONES EN PYTHON
# ====================================================

# ----------------------------------------------------
# 1. Funci칩n SIN par치metros
# ----------------------------------------------------
# Definimos una funci칩n que no recibe nada y solo imprime algo
def saludar():
    print("Hola, esta es una funci칩n sin par치metros.")

saludar()  # Llamada a la funci칩n


# ----------------------------------------------------
# 2. Funci칩n CON par치metros
# ----------------------------------------------------
# Definimos una funci칩n que recibe valores al llamarla
def saludar_nombre(nombre):
    print(f"Hola {nombre}, bienvenido a Python.")

saludar_nombre("Ana")
saludar_nombre("Luis")


# ----------------------------------------------------
# 3. Funci칩n CON return
# ----------------------------------------------------
# Las funciones pueden devolver un valor con 'return'
def suma(a, b):
    return a + b

resultado = suma(5, 3)
print("Resultado de la suma:", resultado)


# ----------------------------------------------------
# 4. Funci칩n SIN return (retorno impl칤cito None)
# ----------------------------------------------------
# Si no usamos 'return', la funci칩n devuelve None por defecto
def imprimir_suma(a, b):
    print("Suma:", a + b)

valor = imprimir_suma(2, 4)
print("Valor devuelto:", valor)  # None


# ----------------------------------------------------
# 5. Funci칩n con *args
# ----------------------------------------------------
# *args permite pasar una cantidad variable de argumentos
def sumar_varios(*args):
    return sum(args)

print("Suma de varios n칰meros:", sumar_varios(1, 2, 3, 4, 5))


# ----------------------------------------------------
# 6. Funci칩n con **kwargs
# ----------------------------------------------------
# **kwargs permite pasar argumentos nombrados (clave=valor)
def mostrar_info(**kwargs):
    for clave, valor in kwargs.items():
        print(f"{clave}: {valor}")

mostrar_info(nombre="Carlos", edad=30, ciudad="Madrid")


# ----------------------------------------------------
# 7. Pasar LISTAS como par치metros
# ----------------------------------------------------
# Podemos pasar una lista y procesarla dentro de la funci칩n
def procesar_lista(lista):
    return [x * 2 for x in lista]

numeros = [1, 2, 3, 4]
print("Lista procesada:", procesar_lista(numeros))


# Tambi칠n podemos desempaquetar una lista con * al pasarla
def multiplicar(a, b, c):
    return a * b * c

valores = [2, 3, 4]
print("Multiplicaci칩n con *lista:", multiplicar(*valores))


# ----------------------------------------------------
# 8. Pasar DICCIONARIOS como par치metros
# ----------------------------------------------------
# Podemos desempaquetar diccionarios con **
def mostrar_persona(nombre, edad, ciudad):
    print(f"{nombre} tiene {edad} a침os y vive en {ciudad}.")

persona = {"nombre": "Ana", "edad": 25, "ciudad": "Sevilla"}
mostrar_persona(**persona)  # Se pasan como kwargs


# ----------------------------------------------------
# 9. Funciones anidadas (funciones dentro de funciones)
# ----------------------------------------------------
def exterior(x):
    def interior(y):
        return y * 2
    return interior(x)

print("Resultado funci칩n anidada:", exterior(5))


# ----------------------------------------------------
# 10. Funciones lambda (funciones an칩nimas)
# ----------------------------------------------------
# Son funciones peque침as que se definen en una sola l칤nea
doble = lambda x: x * 2
print("Lambda doble:", doble(4))

# Uso com칰n con funciones de orden superior
numeros = [1, 2, 3, 4, 5]
cuadrados = list(map(lambda x: x ** 2, numeros))
print("Cuadrados con lambda:", cuadrados)


# ----------------------------------------------------
# 11. Buenas pr치cticas profesionales
# ----------------------------------------------------
# - Usar nombres descriptivos para las funciones.
# - Documentar con docstrings.
# - Mantener funciones cortas y espec칤ficas.
# - Evitar modificar variables globales.
# - Preferir argumentos con valores por defecto para configuraciones.

def calcular_area(base: float, altura: float = 1.0) -> float:
    """
    Calcula el 치rea de un rect치ngulo.

    Par치metros:
        base (float): longitud de la base.
        altura (float, opcional): altura del rect치ngulo. Por defecto 1.0.

    Retorna:
        float: 치rea del rect치ngulo.
    """
    return base * altura

print("츼rea con base=5 y altura=2:", calcular_area(5, 2))
print("츼rea solo con base=5:", calcular_area(5))
